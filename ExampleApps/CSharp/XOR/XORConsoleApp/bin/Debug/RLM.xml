<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RLM</name>
    </assembly>
    <members>
        <member name="P:RLM.RlmNetwork.NumSessions">
            <summary>
            The set number of sessions
            </summary>
        </member>
        <member name="P:RLM.RlmNetwork.StartRandomness">
            <summary>
            The starting percentage of randomness to be used by the engine
            </summary>
        </member>
        <member name="P:RLM.RlmNetwork.EndRandomness">
            <summary>
            The last percentage of randomness where the engine halts
            </summary>
        </member>
        <member name="P:RLM.RlmNetwork.MaxLinearBracket">
            <summary>
            Maximum value set for the range of Linear Type Training
            </summary>
        </member>
        <member name="P:RLM.RlmNetwork.MinLinearBracket">
            <summary>
            Minimum value set for the range of Linear Type Training
            </summary>
        </member>
        <member name="M:RLM.RlmNetwork.#ctor">
            <summary>
            default contstructor, creates "RyskampLearningMachine" database
            </summary>
        </member>
        <member name="M:RLM.RlmNetwork.#ctor(System.String)">
            <summary>
            sets your preferred database name
            </summary>
            <param name="databaseName">database name</param>
        </member>
        <member name="M:RLM.RlmNetwork.NewNetwork(System.String,System.Collections.Generic.IEnumerable{RLM.Models.RlmIO},System.Collections.Generic.IEnumerable{RLM.Models.RlmIO})">
            <summary>
            Sets up a new network and sets the network as current network to use in training.
            </summary>
            <param name="name">Your preferred network name</param>
            <param name="inputs">List of input types for your created network</param>
            <param name="outputs">List of output types for your created network</param>
        </member>
        <member name="M:RLM.RlmNetwork.LoadNetwork">
            <summary>
            Loads the first network in the database, sorted by ID
            </summary>
            <returns>Returns true if network is successfully loaded</returns>
        </member>
        <member name="M:RLM.RlmNetwork.LoadNetwork(System.String)">
            <summary>
            Loads selected network’s data (input types, output types, training data, network settings) from the Database into memory lists.
            </summary>
            <param name="name">the network you prefer to load</param>
            <remarks>
            Is used as an indicator if there’s a need to create a new network.
            </remarks>
            <returns>Returns true if network is successfully loaded</returns>
        </member>
        <member name="M:RLM.RlmNetwork.SessionStart">
            <summary>
            Sets the state of the session to started
            </summary>
            <remarks>Cannot be used again prior to SessionEnd()</remarks>
            <returns>Returns the Session ID of the current session</returns>
        </member>
        <member name="M:RLM.RlmNetwork.SessionEnd(System.Double)">
            <summary>
            Halts the current session
            </summary>
            <param name="finalSessionScore">the score of the current session</param>
        </member>
        <member name="M:RLM.RlmNetwork.ScoreCycle(System.Int64,System.Double)">
            <summary>
            Saves cycle information to database and updates with the score
            </summary>
            <param name="cycleId">Unique identifier of the Cycle</param>
            <param name="cycleScore">Score the engine attained this cycle</param>
        </member>
        <member name="M:RLM.RlmNetwork.TrainingDone">
            <summary>
            Notifies the RLM that the current training/prediction sessions are finished and you will no longer use the RLM Network instance. 
            Also, it allows the DataPersistence events to work properly so this must be called at the very end.
            </summary>   
        </member>
        <member name="M:RLM.RlmNetwork.ResetRandomizationCounter">
            <summary>
            Resets the internal randomization counter to the maximum that was set (StartRandomness). You must call this when you want to retrain the network
            after it has recently been trained to maintain the StartRandomness-EndRandomness range. Without calling this method, the randomization will stay 
            at the minimum value (EndRandomness) for all training sessions onwards.
            </summary>
        </member>
        <member name="M:RLM.RlmNetwork.SetDataPersistenceProgressInterval(System.Int32)">
            <summary>
            Changes the interval time that the DataPersistenceProgress event is triggered. Default time is 1000ms (1 second)
            </summary>
            <param name="milliseconds">The amount of time for the interval in milliseconds (ms)</param>
        </member>
        <member name="M:RLM.RlmCycle.RunCycle(RLM.RlmNetwork,System.Int64,System.Collections.Generic.List{RLM.Models.RlmIOWithValue},System.Boolean,System.Collections.Generic.List{RLM.Models.RlmIOWithValue},System.Double,System.Boolean,System.Collections.Generic.IEnumerable{RLM.Models.RlmIdea})">
            <summary>
            starts training
            </summary>
            <param name="rnnNet">current network being used</param>
            <param name="sessionID">unique identifier for the session being started</param>
            <param name="inputsValues">Inputs with stored values</param>
            <param name="learn">Indicator that if true, will start training, if false, will run prediction</param>
            <param name="outputValues">Outputs with stored values</param>
            <param name="cyclescore">Score of the current cycle</param>
            <param name="Parallel"></param>
            <param name="ideas">Gives bias to the RLM on what to output</param>
            <returns></returns>
        </member>
    </members>
</doc>
